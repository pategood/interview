
用户每次打开页面,浏览器会判断本地缓存是否过期,没有过期就用缓存中的数据
页面刷新  浏览器会直接去请求服务器的数据 ,采用协商缓存

强缓存:   
  请求头中，根据response header中的expires和cache-control来判断是否命中强缓存
  强缓存会给资源设置过期时间,用户每次请求资源是都会判断是否过期
    过期才会去进行协商缓存

协商缓存: 
  协商缓存才有etag、last-modified 
  协商缓存就是需要客户端和服务器 进行交互时 


发请求-->看本地资源是否过期-->
过期-->请求服务器-->服务器对比资源是否真的过期-->没过期-->返回304状态码-->客户端用缓存的老资源。


请求资源时，把用户本地该资源的 etag、last-modified 同时带到服务端，服务端和最新资源做对比。
服务器会优先验证ETag，一致的情况下，才会继续比对Last-Modified，
  如果资源没更改，返回304，浏览器读取本地缓存。
  如果资源有更改，返回200，返回最新的资源。


发请求-->看本地资源是否过期(expires)-->过期-->请求服务器-->服务器对比资源是否真的过期-->
过期-->返回200状态码并且返回最新数据-->
客户端如第一次接收该资源一样，记下它的cache-control中的max-age、etag、last-modified等。

https://imgconvert.csdnimg.cn/aHR0cHM6Ly9zZWdtZW50ZmF1bHQuY29tL2ltZy9yZW1vdGUvMTQ2MDAwMDAxNzk2MjQxNg?x-oss-process=image/format,png


https://pic2.zhimg.com/f5faffe92a046d9552664bff39697fa9_b.jpg


得使用Last-Modified已经足以让浏览器知道本地的缓存副本是否足够新，
为什么还需要Etag（实体标识）呢？

HTTP1.1中Etag的出现主要是为了解决几个Last-Modified比较难解决的问题：

1. Last-Modified标注的最后修改只能精确到秒级，如果某些文件在1秒钟以内，被修改多次的话，它将不能准确标注文件的修改时间

2. 如果某些文件会被定期生成，当有时内容并没有任何变化，但Last-Modified却改变了，导致文件没法使用缓存

3. 有可能存在服务器没有准确获取文件修改时间，或者与代理服务器时间不一致等情形

Etag是服务器自动生成或者由开发者生成的对应资源在服务器端的唯一标识符，
能够更加准确的控制缓存。Last-Modified与ETag是可以一起使用的，
服务器会优先验证ETag，一致的情况下，才会继续比对Last-Modified，
最后才决定是否返回304。




服务器：我不懂！a.js我给你，过期时间我也给你，再给你一个max-age=60(单位秒)，Last-Modified你也给我收好，再加一个文件内容唯一标识符Etag。

后续请求....

60S内，不发起请求，直接使用本地缓存。（max-age=60代表请求成功缓存后的60S内不再发起请求，与Expires相似，同时存在max-age优先级要比Expires高，区别后面具体说）

60S后，浏览器带上了if-Modified-Since 与If-None-Match(上次服务器返回来的Etag)发起请求，服务器对比If-None-Match与Etag(不对比if-Modified-Since与Last-Modified了，Etag优先级比Last-Modified高，毕竟更精准)

If-None-Match与Etag不相等，说明a.js内容被修改过，服务器返回最新a.js与全新的Etag与max-age=60与Last-Modified与Expires

If-None-Match与Etag相等，说明a.js文件内容无任何改变，返回304，告诉浏览器继续使用之前的本地缓存。

如下图，服务器Etag与If-None-Match相同，所以返回了状态码304，由于优先级问题，虽然也有if-Modified-Since与Last-Modified，但这里不会对两者做对比。