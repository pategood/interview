输入url到页面渲染的7步骤

  用户输入 URL 地址。
  对 URL 地址进行 DNS 域名解析。
  建立 TCP 连接（三次握手）。
  浏览器发起 HTTP 请求报文。
  服务器返回 HTTP 响应报文。
  关闭 TCP 连接（四次挥手）。
  浏览器解析文档资源并渲染页面。



URL输入到页面渲染大体上可以分为网络通信 和 页面渲染 两个阶段

  具体:
    输入url  查看是否有本地ip地址,
      无则进行dns解析,(dns解析会分别去浏览器、本地hosts、服务器查找ip)获取IP地址
    通过IP地址发起http请求

    3次握手建立连接, 
      对各种请求资源 采取 强缓存  协商缓存判断

      浏览器发起 HTTP 请求报文,然后 接收http响应报文

    4次挥手断开连接

    浏览器解析资源
      解析html生成dom树,解析css资源生成Css object model (CSSOM)

      CSSOM和dom树结合生成 render 树(渲染树) 期间可能参杂着执行js代码

      通过render树   重绘（repaint）和重排（reflow）

      (vue项目中:
        首先创建vue实例,初始化事件,初始化render函数
        执行 beforecreate
        dom未生成,可发起异步请求,初始化数据,方法
        执行 created
        模板编译完成,但未挂载,建好虚拟dom,并将vue实例挂载到dom上)
        执行 beforeMount
        vue实例挂载到dom上,且渲染完成
        mounted   )





GUI渲染线程与JS引擎线程是互斥.JS引擎执行时GUI线程会被挂起,等待js引擎执行完成

(render函数使用h方法,并用VNdoe这个类来实例化它)

html的原始字节,根据文件的指定编码转换字符(一大串字符串)
通过词法解析,将字符流解析成token(词) ,
通过语法解析,将token创建节点(nodes)对象,最后连接创建dom树

解析css的操作与html差不多,不同的是生成CSSOM




死亡连问:
  网页刷新会判断 采取什么强 或 协商 吗?

  3次握手在强缓存协商缓存前还是后?

  css和html是同步解析的吗 ,那js呢?  如何解决js 问题,让渲染速度加快