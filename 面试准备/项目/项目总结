axios错误拦截
  统一报错
  未登录统一拦截
  请求值，返回值统一处理

  get请求：
    axios.get('/user',{
      params:{
        ID:12345
      }
    })
  post请求
    axios.post('/user',{
      firstName:'Fred',
      lastName:'Flintstone'
    })
    axios.all同时发送多个请求  原理是:promise.all

  //使用拦截器对接口返回的数据进行处理,
  例如返回的数据内有status、data、msg,结果拦截后只返回data

    axios.interceptors.response.use(function(response){
      let res =  response.data;
      let path = location.hash;
      if(res.status == 0){
        return res.data;
      }else if(res.status == 10){
        if(path != '#/index' ){
          //main.js里面无法用vue-router跳转 这里的this无法取到vue
          window.location.href = '/#/login';
          return Promise.reject(res);
        }
      }else{
        Message.warning(res.meg)
        return Promise.reject(res);
      }
    },(error)=>{
      let res = error.response;
      Message.error(res.data.message);
      return Promise.reject(error);
    });    }


接口环境配置
  根据不同的开发环境来设置 请求的接口url

  开发上线的不同阶段，需要不同的配置
  不同的跨域方式，配置不同
  打包的时候统一注入环境参数，统一管理环境，输出不同的版本包

  具体在env.js里面配置
  {
    let baseURL;
    // 通过process.env.MODE_ENV获取webpack传递过来的参数
    switch(process.env.MODE_ENV) {
      case 'development':
        baseURL='http://dev-mall-pre.springboot.cn/api';
        break;
      case 'test':
        baseURL='http://test-mall-pre.springboot.cn/api';
        break;
      case 'prod':
        baseURL='http://mall-pre.springboot.cn/api';
        break;
      default:
        baseURL='http://mall-pre.springboot.cn/api';
        break;
    }

    export default{
      baseURL
    }
  }



路由跳转:
  路由导航: 
        <router-link to="/cart/id"></router-link>     
        <router-link to="'/cart/'+id"></router-link>     
          路: /cart/:id  
          取参 this.$route.params.id


        <router-link to="{path:/cart query: {id:id}}"></router-link>     
         路: /cart/ (常)
         取参: this.$route.query.id
         问题:跳转页面时,页面要刷新才能获取数据

  push/replace:  
        
        name: 'cart', params: {id:id}            
          路: /cart   (常)                  1
          取参 this.$route.params.id    
        (刷新丢失)
        
        path: `/cart/${id}`    
           路: /cart/:id                    1
          取参 this.$route.params.id
        (刷新不丢失)

        path: '/cart' query: {id:id}
          路: /cart/   (常)       
          取参 this.$route.query.id
        (刷新不丢失)   不支持props传参)

      总结:
        path不能和params连用
        query是拼接在url后面的参数
        





加入购物车:
  用axios的post请求加商品id来发起加入购物车请求

  删除商品axios.delete
  更改商品数量以及选中用axios.put
  定义了一个方法,专门将请求回来的数据重新赋值给data的数据

mock设置:
  Ⅰ.使用本地mock
    在public里面创建mock文件里面放json文件
    在vue文件里面使用
      this.axios.get('/mock/user/login.json').then((res)=>{
        this.res=res;
      })
    来请求数据

  缺点:后期要改代码,因为请求的接口路径不一样

  Ⅱ.通过Easy Mock
    将baseURL地址改为EasyMock生产的地址
    axios.defaults.baseURL = ' https://www.easy-mock.com/mock/5fbe0b3d1bc0682deacbfea7/mimall';
    this.axios.get('/user/login').then((res)=>{
        this.res = res;
    })

  Ⅲ.本地集成mockjs实现数据mock
    npm i mockjs --save-dev
    const mock = true;//定义开关
    if(mock){
      require('./mock/api')//import是预编译加载 require执行的时候才会加载
    }}




首页头部组件

    指着展示热销商品
    给容器item-menu设置&:hover
      给children绝对定位
        内容product用relative相对定位
          在product设置
          &:before并且绝对定位absolute;
          &:last-child:before {
            display: none;
        

    





logo设置:
  给logo的容器设置inline-block  并且设置宽高
  给子元素a标签设置两倍宽度 
  设置a标签的伪类before、after并且内容为空 且设置背景图片
  鼠标移上去用hover:before设置显示:
    margin-left: -55px;transition: margin 0.2s;

  {
    .header-logo {
        display: inline-block;
        width: 55px;
        height: 55px;
        background-color: #ff6600;
        a {
          display: inline-block;
          width: 110px;
          height: 55px;
          &:before {
            content: " ";
            @include bgImg(55px, 55px, "/imgs/mi-logo.png", 55px);
            // margin变化就2s动画过渡
            transition: margin 0.2s;
          }
          &:after {
            content: " ";
            @include bgImg(55px, 55px, "/imgs/mi-logo.png", 55px);
          }
          &:hover:before {
            margin-left: -55px;
            // 使用css3的transition属性
            // 让元素样式2s过度
            transition: margin 0.2s;
          }
        }
      }
  }

吸顶:
  可用插件
  原生吸顶
    获取滚动的高度,当滚动的高度等于组件离顶部的高度   
    fixed固定定位

      给window绑定一个监听事件        (initHeight是方法名)
      window.addEventListener('scroll',this.initHeight)
      定义initHeight方法来计算滚动高度来判断是否需要固定定位在顶部
      标签里面用动态绑定样式 
        注意:监听事件需要在destroyed钩子函数里面销毁监听事件  
          第三个是事件处理方式,true捕获(默),false冒泡
          window.removeEventListener("scroll", this.initHeight, false);


    代码:
    //style
    {  &.is_fixed {
        position: fixed;
        top: 0;
        width: 100%;     
      //因为container容器宽度只有1226px,给父容器加了固定定位后,父容器的宽度跟内容区域的宽度就一样了
        box-shadow: 0 5px 5px $colorE;
      }
    }
    //js
    {      data() {
            return {
              isFixed: false,
            };
          },
          mounted() {
            window.addEventListener("scroll", this.initHeight);
          },
          methods: {
            initHeight() {
              // 滚动高度
              let scrollTop =
                window.pageYOffset ||                   //页面外轴的偏移量
                document.documentElement.scrollTop ||   //谷歌
                document.body.scrollTop;                //IE
                //152是顶部组件的高度
              this.isFixed = scrollTop > 152 ? true : false;
            },
          },
    }
    //html
      <div class="nav-bar" :class="{ is_fixed: isFixed }">


支付: 

  点击事件,根据传递的参数决定支付方式
    参数为1则用window.open打开阿里支付页面,在阿里支付页面发起支付请求,
    接口会返回也一段html代码,在标签里用v-html=content展示
    参数不是1则微信支付,使用post向接口发起微信支付请求

    支付宝: 

  点击触发
    <div class="pay pay-ali" :class="{'checked':payType == 1}" @click="paySubmit(1)"></div>
    <div class="pay pay-wechat" :class="{'checked':payType == 2}" @click="paySubmit(2)"></div>

  点击事件,根据传递的参数决定支付方式
    参数为1则用window.open打开阿里支付页面
    参数不是1则微信支付,使用post向接口发起微信支付请求
    paySubmit(payType){
      if(payType == 1){
        window.open('/#/order/alipay?orderId='+this.orderId,'_blank');
      }else{
        this.axios.post('/pay',{
          orderId:this.orderId,
          orderName:'Vue高仿小米商城',
          amount:0.01,//单位元
          payType:2//1.支付宝 2.微信
        }).then((res)=>{
          QRCode.toDataURL(res.content)
          .then(url => {
            this.showPay = true;
            this.payImg = url;
            this.loopOrderState();
          })
          .catch(() => {
            this.$message.error('微信二维码生成失败，请稍后重试')
          })
        })
      }
    },



登录:
  在data里面定义用户名和密码,然后再标签里面使用v-modal双向绑定
    接着将用户名和密码当作参数用axios发起post请求
    请求成功后将用户id存到cookie里面,同时设置过期事件
    用this.$store.dispatch的方式调用vuex的mutation的方法来修改vuex的数据

    由于数据在vuex里面刷新就没了,我们统一在App.vue里面用get请求用户信息和购物车信息

  具体:
    在app.vue里面如过cookie里面存在用户有id,则表示用户登录了,
      就用get请求数据,并将请求回来的数据存到vuex里面
  获取地址
  let path = location.hash}

vuex的使用
使用 this.$store.dispatch("Actions的方法名", 变量名);
action里面的方法通过context.commit('mutations的方法名',变量名)来修改state的数据
当数据有延迟时,注意需要使用计算属性

  由于先加载app.vue组件,后加载navheader.vue组件
    组件加载需要时间
    
    app.vue调用接口,需要时间  navHeader使用username时发现接口还没请求回来,所以用户名为空
    取完值后,接口调用回来了存好数据,navheader的数据不会被更新,不会二次取值

    解决办法:
      computed计算属性来解决,初始没有值,但后面接口调用回来以后computed会重新计算数值


视频播放:

## Css3动画库
https://daneden.github.io/animate.css/

下面span标签是用来关闭视频

<span class="icon-close" @click="closeVideo"></span>
<video src="/imgs/product/video.mp4" muted autoplay controls="controls"></video>
controls="controls"  是播放 进度条显示
muted  静音播放

video设置水平垂直居中

8-4 Slide动画{
  transition过度 单个属性单一的过度动画
  animations动画  比较复杂的过渡效果

  transition
  点击外围,关闭       注意不能用v-if,因为用v-if会没有过渡
    在video-bg给showSlide 设置true
    在icon-close给showSlide设置false
  给video的top设置为-50%
  点击显示时,top变为50%,用transition过渡

  transition:all .6s
  对video使用v-bind绑定class而不是使用v-if
  <div class="video" v-bind:class="{‘slide’：showSlide}">


  animations动画
        animations
    定义动画
    .video-box下面:
    //下滑
    @keyframes slideDown{
      from{
        top:-50%;
        opacity:0;
      }
      to{
        top:50%;
        opacity:1;
      }
    }
    //上拉 回去
    @keyframes slideUp{
      from{
        top:50%;
        opacity:1;
      }
      to{
        top:-50%;
        opacity:0;
      }
    }

    为.video调用动画 animation的上拉下滑
    linear匀速
    &.slideDown{
      animation:slideDown .6s linear;
      top:50%;//使他播放完动画停留在50%
    }
    &.slideUp{
      animation:slideUp .6s linear;
    }

  bug解决,当我们按f12打开控制台,窗口变小,窗口放不下视频
  解决办法,将video-box隐藏掉 ,因为video-box是display:block;此元素前后会带有换行符
  修改后,由于用了v-show,没有关闭没有过渡,
    所以我们定义关闭按钮事件用定时器延迟600秒,等他过渡完后关闭
      <div class="video-bg" @click="showSlide='slideDown'"></div>
				<div class="video-box" v-show="showSlide">
					<div class="overlay"></div>
					<div class="video" v-bind:class="showSlide">
						<span class="icon-close" @click="closeVideo"></span>
						<video src="/imgs/product/video.mp4" muted autoplay controls="controls"></video>
					</div>
				</div>




商品跳转, 
  product-param 用v-bind绑定数据,往组件里面传数据