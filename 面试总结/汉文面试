个人介绍：
  面试官你好，非常荣幸能参加这次面试，我是曾南期，今年7月份毕业，大学本科专业是计算机科学与技术，在校期间，使用vue3+typescript +vant ui仿造B站app开发的移动端学习平台，后端使用的是egg + mysql，
  主要模块包括文章 视频 个人信息 评论模块 
    去年7月份，我入职于浙江集享电子商务有限公司，公司的主要技术栈是vue+element ui，负责一些后台管理系统，后来公司因为没有转正名额，所以我在今年一月份时，我入职深圳递四方信息科技有限公司，公司使用的技术栈是react + ahooks+fuison,工作内容是负责GFN业务相关的后台管理系统的日常迭代





一.vue3 与vue2 的区别  
  1. 双向数据绑定原理发生改变：
      vue2是通过Object.definepropert()来劫持对象属性的getter和setter进行操作 并结合发布订阅模式来实现的
      vue3是通过proxy API对数据对象进行监听，按需监听
  2. Composition API
      vue2的data,watch,computed,methods都在setup里面,
      beforeCreate 和 created被setup替代 ，并且setup执行时机在beforeCreate之前

  3. v-if 和 v-for的优先级变化
        vue2 的v-for 优先级高，一起使用会 先渲染在进行v-if判断
        vue3 的 v-if 优先级高，先判断在进行for

二.ref toRef toRefs 的区别
  reactive 创建一个响应式对象
  ref相当于复制数据，修改时不会影响原数据，但页面会更新
  toRef是引用数据，修改数据会影响原数据，但也没不会更新
  toRefs相当于批量引用数据，其他性质与toRef一样


三 .二维码登录实现？ pc电脑如何知道用户扫码
  1. PC页面发起请求获取二维码和key，服务器返回二维码和key，
  2. pc显示二维码并轮询登录状态
  3. 手机进行扫码后 点击确认登录，向服务器发起请求
  4. 服务器接收请求后，返回登录成功和用户信息给PC，pc显示登录成功并结束轮询

四.vue的代码逻辑如何抽离 （minxin ，vue3用hooks）
  vue3的setup可以使用抽离出去的代码逻辑
  minxi的混入对象可以包含任意组件选项，比如data，create，methods等等，
    data属性会被合并，相同则取组件的
    方法名相同则执行组件的方法
    钩子函数（created）执行顺序先minxin后组件

五.nextTick  如何实现
  $nextTick 是在下次 DOM 更新循环结束之后执行延迟回调，在修改数据之后使用 $nextTick，则可以在回调中获取更新后的 DOM
  实现延迟回调的方法 优先级是 promise.then 》 mutationObserver的回调函数 》 setImmediate 》 setTimeOut

六.vue的数组更新 

七.组件通信，如何进行共享，不使用v-model 和 设置事件监听


八.父子组件渲染顺序
    加载渲染过程
    父beforeCreate->父created->父beforeMount->子beforeCreate->子created->子beforeMount->子mounted->父mounted

    子组件更新过程
    父beforeUpdate->子beforeUpdate->子updated->父updated

    父组件更新过程
    父beforeUpdate->父updated

    销毁过程
    父beforeDestroy->子beforeDestroy->子destroyed->父destroyed
      

九.vuex介绍            
      
    单向数据流 
      action -> State -> view -> action

    状态管理工具    多个组件共享数据或者是跨组件传递数据时  使用
      State     状态  存储共享的变量和数据
      getter    从state中获取数据的，相当于vue的计算属性
      mutation  提交更新数据的方法   必须是同步的 
      action    异步的更新数据的方法
      modules   模块化的vuex  

      commit：同步操作，写法：this.$store.commit('mutations方法名',值)
      dispatch：异步操作，写法： this.$store.dispatch('actions方法名',值)

十.diff 如何生成虚拟dom 更新策略
  将模板转换成 ast 树（抽象语法树） ，ast就是将真实的dom转化为js的对象，通过对象来描述真实dom
  template(真实DOM) -> AST 树 -> render函数 -> 虚拟dom

  更新策略：
    最小量更新 ，通过key进行唯一
      只进行同层比较，不会进行跨层比较
  优化策略：
    只进行同层比较。先比开头 ，接着比对结尾 接着 旧的头和新的尾  接着 旧尾 与新的前

十一. 实现v-model


十二. vue组件通信，10个组件，每个组件不需要设置事件通知父组件更新


插槽和作用域插槽 
  插槽：创建组件虚拟节点时，会将组件儿子的虚拟结点保存起来，当初始化组件时，通过插槽属性将儿子进行分类
  作用域插槽：在解析的时候不会作为组件的孩子节点。会解析成函数，当子组件渲染时，会调用此函数进行渲染。

    普通插槽渲染的作用域是父组件，作用域插槽的渲染作用域是当前子组件。

js扁平化方法 flat reduce+concat  toString + split + map

tree结构获取id 递归进行遍历数组





补充：
  http状态码
    1xx 临时响应并需要请求者继续执行操作
    2xx 请求成功，
    3xx 重定向
    4xx 客户端请求出错
    5xx 服务器处理请求出错